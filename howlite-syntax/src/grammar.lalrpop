use crate::{ParseError, treeslab::{TreeSlab, NodeId}, lexer::Token, ast::*};
use lalrpop_util::ErrorRecovery;

grammar<'input, 'err, 'tree>(tree: &'tree mut TreeSlab, errors: &'err mut Vec<ErrorRecovery<usize, Token<'input>, ParseError>>);

extern {
    // Set the error type for the parse result.
    // NOTE: this is only for fatal errors,
    //       recovered errors are passed back through a parameter to the grammar. 
    type Error = ParseError;
    type Location = usize;

    enum Token<'input> {
        "let" => Token::KeywordLet,
        "func" => Token::KeywordFunc,
        "bool" => Token::KeywordBool,
        "unit" => Token::KeywordUnit,
        "false" => Token::KeywordFalse,
        "true" => Token::KeywordTrue,
        "mut" => Token::KeywordMut,
        "type" => Token::KeywordType,
        "if" => Token::KeywordIf,
        "else" => Token::KeywordElse,
        "while" => Token::KeywordWhile,
 
        "ident" => Token::Identifier(<&'input str>),
        "literal-int" => Token::LiteralInteger(<&'input str>),

        "(" => Token::ParenLeft,
        ")" => Token::ParenRight,
        "{" => Token::BraceCurlyLeft,
        "}" => Token::BraceCurlyRight,
        "[" => Token::BraceSquareLeft,
        "]" => Token::BraceSquareRight,
        "<{" => Token::TyParamStart,
        "}>" => Token::TyParamEnd,
        ";" => Token::Semicolon,
        ":" => Token::Colon,
        "," => Token::Comma,
        "." => Token::Dot,
        "+" => Token::OperatorAdd,
        "-" => Token::OperatorSub,
        "*" => Token::OperatorMul,
        "/" => Token::OperatorDiv,

        "==" => Token::OperatorCmpEq,
        "!=" => Token::OperatorCmpNe,
        "<" => Token::OperatorCmpLt,
        ">" => Token::OperatorCmpGt,
        "<=" => Token::OperatorCmpLe,
        "=>" => Token::OperatorCmpGe,

        "=" => Token::OperatorAssign,
        "struct" => Token::KeywordStruct,
        ".." => Token::IntegerRange,

        " " => Token::Whitespace(<&'input str>),
    }
}

/// One ore more items that are separated by a comma.
/// Source: https://github.com/RustPython/Parser/blob/9ce55aefdeb35e2f706ce0b02d5a2dfe6295fc57/parser/src/python.lalrpop#L1659
OneOrMore<T>: Vec<T> = {
    <e:T> => vec![e],
    <mut v: OneOrMore<T>> "," " "? <e:T> => {
        v.push(tree.add(e));
        v
    }
};


pub Param: Param = {
    <l: @L> <name:"ident"> " "? ":" " "? <typ:Ty> <r: @R> " "? => Param {
        span: (l, r).into(),
        xdata: (),

        name: name.to_string(),
        typ,
    }
};

pub DefParams: Vec<SyntaxNodeRef> = {
    "(" " "? ")" => vec![],
    "(" " "?<params: OneOrMore<Param>> ")" => 
};


// START: Type Expressions
//{

pub Ty: Ast = {
    <t:TyStruct> => Ast::TyStruct(t),
    <t:TyArray> => Ast::TyArray(t),
    <t:TyNumberRange> => Ast::TyNumberRange(t),
    <t:TyBool> => Ast::TyBool(t),
    <t:TyUnit> => Ast::TyUnit(t),
    <t:TyRef> => Ast::TyTyRef(t),
}

pub TyRef: ast::TyRef = {
    <l: @L> <name: "ident"> <r: @R> => ast::TyRef {
        span: (l, r).into(),
        xdata: (),

        name: name.to_string(),
        parameters: vec![],
    },

    // TODO: allow whitespace between name and ty params,
    // we need to rework anon types in general to have a final " "?
    // to do that
    <l: @L> <name: "ident"> <parameters: TyParams> <r: @R> => {
        ast.insert(l, r, TyRef { name: name.to_string(), parameters  }
};

pub TyArray: ast::TyArray = {
    <l: @L> "[" " "? <element_ty:Ty> " "? ";" " "? <size:"literal-int"> "]" <r: @R> => {
        ast::TyArray {
            span: (l, r).into(),
            xdata: (),

            element_ty: Box::new(element_ty),
            length: u32::from_str_radix(size, 10).expect("failed to parse literal-int token, this should be unreachable")
        }
    }
};

pub TyNumberRange: ast::TyNumberRange = {
    <l: @L> <lo:"literal-int"> " "? ".." " "? <hi:"literal-int"> <r: @R> => ast::TyNumberRange {
        span: (l, r).into(),
        xdata: (),

        inclusive_low: lo.to_string(),
        inclusive_high: hi.to_string(),
    },
};

pub TyBool: ast::TyBool = {
    <l: @L> "bool" <r: @R> => ast::TyBool {
        span: (l, r).into(),
        xdata: (),
    }
}

pub TyUnit: ast::TyUnit = {
    <l: @L> "unit" <r: @R> => ast::TyUnit {
        span: (l, r).into(),
        xdata: (),
    }
}

pub TyStruct: ast::TyStruct = {
    <l: @L> "{" " "? "}" <r: @R> => ast::TyStruct {
        span: (l, r).into(),
        xdata: (),

        members: vec![]
    },

    <l: @L> "{" " "? <members: OneOrMore<DefStructMember>> " "? "}" <r: @R> => {
        ast::TyStruct {
            span: (l, r).into(),
            xdata: (),

            members,
        }
    }
}

pub DefFunction: ast::DefFunction = {
    <l: @L> "func" " " <name:"ident"> <params:DefParams> " "? ":" " "? <ty:Ty> " "? <block: Block> <r: @R> => {
        ast::DefFunction {
            span: (l, r).into(),
            xdata: (),

            name: name.to_string(),
            params,
            return_ty: tree.add(ty),
            body: tree.add(block)
        }
    }
};

pub DefExtern: ast::DefExtern = {
    <l: @L> "func" " " <name:"ident"> <params:DefParams> " "? ":" " "? <ty:Ty> " "? ";" " "? <r: @R> => {
        ast::DefExtern {
            span: (l, r).into(),
            xdata: (),

            name: name.to_string(),
            params,
            return_ty: tree.add(ty),
        }
    }
};

pub DefStructMember: StructMember = {
    <l:@L> "mut" " " <name:"ident"> " "? ":" " "? <ty:Ty> <r:@R> => {
        StructMember {
            span: (l, r).into(),
            xdata: (),

            name: name.to_string(),
            ty: tree.add(ty),
            mutable: true,
        }
    },

    <l:@L><name:"ident"> ":" " "? <ty:Ty> <r:@R> => {
        StructMember {
            span: (l, r).into(),
            xdata: (),

            name: name.to_string(),
            ty: tree.add(ty),
            mutable: false,
        }
    },
};

pub TyParams: Vec<SyntaxNodeRef> = {
    "<{" " "? "}>" => vec![], // TODO: make this an error
    "<{" " "? <ty_params: OneOrMore<Ty>> "}>" => ty_params
};

pub TyParam: ast::TyParam = {
    <l: @L> <name:"ident"> " "? ":" " "? <super_ty:Ty> <r: @R> " "? => ast::TyParam {
        span: (l, r).into(),
        xdata: (),

        name: name.to_string(),
        super_ty: tree.add(super_ty),
        default_ty: None,
    },

    <l: @L> <name:"ident"> " "? ":" " "? <super_ty:Ty> " "? "=" " "? <default_ty:Ty> <r: @R> " "? => ast::TyParam {
        span: (l, r).into(),
        xdata: (),

        name: name.to_string(),
        super_ty: tree.add(super_ty),
        default_ty: Some(tree.add(default_ty)),
    }
}

//}
// END: Type Expressions


// START Definitions
//{

pub DefType: ast::DefType = {
    <l: @L> "type" " " <name:"ident"> " "? "=" " "? <ty:Ty> " "? ";"  <r: @R> => {
        ast::DefType {
            span: (l, r).into(),
            xdata: (),

            name: name.to_string(),
            ty: tree.add(ty),
            ty_params: vec![]
        }
    },

    <l: @L> "type" " " <name:"ident"> " "? <ty_params:DefTyParams> " "? "=" " "? <ty:Ty> " "? ";"  <r: @R> => {
        ast::DefType {
            span: (l, r).into(),
            xdata: (),

            name: name.to_string(),
            ty: tree.add(ty),
            ty_params,
        }
    }
}

pub DefTyParams: Vec<SyntaxNodeRef> = {
    "<{" " "? "}>" => vec![], // TODO: make this an error
    "<{" " "? <ty_params: OneOrMore<TyParam>> "}>" => ty_params
};

// TODO: move other defs here

//}
// END: Defintions

pub StmtIf: ast::StmtIf = {
    <l: @L> "if" " " <condition:Expr> <body:Block> <r: @R> => ast::StmtIf {
        span: (l, r).into(),
        xdata: (),

        condition: tree.add(condition),
        body: tree.add(body),
        else_: None,
    },

    <l: @L> "if" " " <condition:Expr> <body:Block> "else" " "? <else_:Block> <r: @R> => ast::StmtIf {
        span: (l, r).into(),
        xdata: (),

        condition: tree.add(condition),
        body: tree.add(body),
        else_: Some(tree.add(else_)),
    }

    // TODO: else if
}


pub StmtWhile: ast::StmtWhile = {
    <l: @L> "while" " " <condition:Expr> <body:Block> <r: @R> => ast::StmtWhile {
        span: (l, r).into(),
        xdata: (),

        condition: tree.add(condition),
        body: tree.add(body),
    },

}

pub ExprCall: ast::ExprCall = {
    // FIXME: how to allow whitespace between fname and ( without adding ambiguity
    <l: @L> <fname:"ident"> "(" " "? ")" <r: @R> => ast::ExprCall {
        span: (l, r).into(),
        xdata: (),

        function_name: fname.to_string(),
        paramaters: vec![]
    },

    <l: @L> <fname:"ident"> "(" " "? <paramaters:OneOrMore<Expr>> ")" <r: @R> => ast::ExprCall {
        span: (l, r).into(),
        xdata: (),

        function_name: fname.to_string(),
        paramaters,
    }
}

pub Expr: Ast = {
    <a:StmtLet>  => Ast::StmtLet(a),
    // notice only trailing whitespace is used to reduce ambiguities
    <l: @L> <lhs:AtomicExpr> <op:InfixOp> " "? <rhs:ErrNoExplicitExprGrouping> <r: @R>  => Ast::Expr(ast::Expr {
        span: (l, r).into(),
        xdata: (),

        lhs: tree.add(lhs),
        op,
        rhs: tree.add(rhs) 
    }),
    AtomicExpr
};


pub StmtLet: ast::StmtLet = {
    <l: @L> "let" " " "mut" " " <name:"ident"> " "? ":" " "? <ty:Ty> " "? "=" " "? <value:Expr> <r: @R> => ast::StmtLet {
        span: (l, r).into(),
        xdata: (),

        mutable: true,
        name: name.to_string(),
        ty: tree.add(ty),
        value: tree.add(value),
    },

    <l: @L> "let" " " <name:"ident"> " "? ":" " "? <ty:Ty> " "? "=" " "? <value:Expr> <r: @R> => ast::StmtLet {
        span: (l, r).into(),
        xdata: (),

        mutable: false,
        name: name.to_string(),
        ty: tree.add(ty),
        value: tree.add(value),
    }
}

pub StructLiteralMember: ast::StructLiteralMember = {
    <l:@L> <field:Ident> " "? "=" " "? <value:Expr> <r:@R> => {
        ast::StructLiteralMember {
            xdata: (),
            span: (l, r).into(),

            field: tree.add(field),
            value: tree.add(value)
        }
    },
}


pub StructLiteral: ast::StructLiteral = {
    <l: @L> "struct" " "? "{" " "? "}" <r: @R> => ast::StructLiteral { xdata: (), span: (l, r).into(), members: vec![] },
    <l: @L> "struct" " "? "{" " "? <members: OneOrMore<StructLiteralMember>> "}" <r: @R> => {
        ast::StructLiteral {
            xdata: (),
            span: (l, r).into(),
            members
        }
    }
}

pub Stmt: Ast = {
    <a:Expr> => a,
}

pub StmtList: Vec<SyntaxNodeRef> = {
    <e:Stmt> => vec![tree.add(e)],
    <mut v: StmtList> ";" " "? <e:Stmt> => {
        v.push(tree.add(e));
        v
    }
}

pub Block: ast::Block = {
    <l: @L> "{" " "? "}" <r: @R> " "? => ast::Block {
        span: (l, r).into(),
        xdata: (),
        returns: false, statements: vec![]
    },
    <l: @L> "{" " "? <statements: StmtList> "}" <r: @R> " "? => ast::Block {
        span: (l, r).into(),
        xdata: (),
        returns: true,
        statements
    },
    <l: @L> "{" " "? <statements: StmtList>  ";" " "? "}"  <r: @R> " "? => ast::Block {
        span: (l, r).into(),
        xdata: (),
        returns: false,
        statements
    },
}

pub ErrNoExplicitExprGrouping: Ast = {
    <l: @L> <lhs:AtomicExpr> <op:InfixOp> " "? <rhs:Expr> <r: @R>  => {
        // TODO push error
        Ast::Repaired(
            ast::Repaired {
                xdata: (),
                span: (l, r).into(),

                tree: Some(tree.add(
                    ast::Expr {
                        span: (l, r).into(),
                        xdata: (),

                        lhs: tree.add(lhs),
                        op,
                        rhs: tree.add(rhs),
                    }
                ))
            }
        )
    },
    AtomicExpr,
};

pub AtomicExpr: Ast = {
    <n:LiteralInteger> " "? => Ast::LiteralInteger(n),
    <b:LiteralBool> " "? => Ast::LiteralBool(b),
    <s:StructLiteral> " "? => Ast::StructLiteral(s),
    <a:LiteralArray> " "? => Ast::LiteralArray(a),
    <a:StmtIf> => Ast::StmtIf(a),
    <a:StmtWhile> => Ast::StmtWhile(a),
    <i:FieldAccess> " "? => Ast::FieldAccess(i),
    <a:ArrayAccess> " "? => Ast::ArrayAccess(a),
    <i:Ident> " "? => Ast::Ident(i),
    <c:ExprCall> " "? => Ast::ExprCall(c),
    <b:Block> => Ast::Block(b),
    "(" <e:Expr> ")" " "? => e,

    // error recovery handler
    // ref: https://github.com/tweag/nickel/blob/f7ffe31697d639ba7d10bcb757a3a8ba73f011a7/core/src/parser/grammar.lalrpop#L431C21-L431C43
    <l: @L> <e: !> <r: @R> => { errors.push(e.clone()); Ast::Repaired(ast::Repaired { xdata: (), span: (l, r).into(), tree: None }) },
};

pub FieldAccess: ast::FieldAccess = {
    <l: @L> <object:AtomicExpr> "." <i:Ident> <r: @R> => {
        ast::FieldAccess {
            xdata: (),
            span: (l, r).into(),
            object: tree.add(object),
            field: i,
        }
    }
}


pub ArrayAccess: ast::ArrayAccess = {
    <l: @L> <object:AtomicExpr> "." "[" " "? <index:Expr> "]" <r: @R> => {
        ast::ArrayAccess {
            xdata: (),
            span: (l, r).into(),
            index: tree.add(index),
            object: tree.add(object),
        }
    }
}


pub InfixOp: InfixOp = {
    "+" => InfixOp::Add,
    "-" => InfixOp::Sub,
    "*" => InfixOp::Mul,
    "/" => InfixOp::Div,

    "!=" => InfixOp::CmpNe,
    "==" => InfixOp::CmpEq,
    "<" => InfixOp::CmpLt,
    "<=" => InfixOp::CmpLe,
    ">" => InfixOp::CmpGt,
    "=>" => InfixOp::CmpGe,

    "=" => InfixOp::Assign,
}

pub LiteralInteger: ast::LiteralInteger = {
    <l: @L> <s:"literal-int"> <r: @R> => ast::LiteralInteger {
        span: (l, r).into(),
        xdata: (),

        value: s.parse::<i32>().unwrap()
    }
}

pub LiteralBool: ast::LiteralBool = {
    <l: @L> "true" <r: @R> => ast::LiteralBool {
        span: (l, r).into(),
        xdata: (),

        value: true
    },
    <l: @L> "false" <r: @R> => ast::LiteralBool {
        span: (l, r).into(),
        xdata: (),

        value: false
    }
}



pub LiteralArray: ast::LiteralArray = {
    <l: @L> "[" " "? <values: OneOrMore<Expr>> "]" <r: @R> => ast::LiteralArray {
        span: (l, r).into(),
        xdata: (),
        values,
    },
}

pub Ident: ast::Ident = {
    <l: @L> <s:"ident"> <r: @R> => ast::Ident {
        span: (l, r).into(),
        xdata: (),

        symbol: s.to_string()
    }
}

TopLevel: Ast = {
    <a:DefFunction> => Ast::DefFunction(a),
    <a:DefExtern> => Ast::DefExtern(a),
    <a:DefType> " "? => Ast::DefType(a)
};

TopLevelList: Vec<Ast> = {
    <e:TopLevel> => vec![tree.add(e)],
    <mut v: TopLevelList> <e:TopLevel> => {
        v.push(tree.add(e));
        v
    }
}


pub Program: Ast = {
    <l: @L> " "? <definitions:TopLevelList> <r: @R> => {
        Ast::Program(ast::Program {
            span: (l, r).into(),
            xdata: (),

            definitions,
        })
    }
};
