# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc 61393d489d4588d77eaf4953facbc80106801306c47fc1a88cc15ec64cd16616 # shrinks to program = BoxAstNode(AstNode { span: Span { start: 0, end: 0 }, data: LiteralArray(LiteralArray { values: [BoxAstNode(AstNode { span: Span { start: 0, end: 0 }, data: LiteralArray(LiteralArray { values: [BoxAstNode(AstNode { span: Span { start: 0, end: 0 }, data: LiteralChar(LiteralChar { value: '\u{e000}' }) }), BoxAstNode(AstNode { span: Span { start: 0, end: 0 }, data: LiteralChar(LiteralChar { value: '\0' }) })] }) })] }) })
cc 6b9f141ed6cdb841bb6d93b463a7c853c5879d5cd83aa29a34daf3124911dd2b # shrinks to program = BoxAstNode(AstNode { span: Span { start: 0, end: 0 }, data: LiteralStruct(LiteralStruct { members: [AstNode { span: Span { start: 0, end: 0 }, data: LiteralStructMember { field: "A", value: BoxAstNode(AstNode { span: Span { start: 0, end: 0 }, data: LiteralStruct(LiteralStruct { members: [AstNode { span: Span { start: 0, end: 0 }, data: LiteralStructMember { field: "A", value: BoxAstNode(AstNode { span: Span { start: 0, end: 0 }, data: LiteralArray(LiteralArray { values: [BoxAstNode(AstNode { span: Span { start: 0, end: 0 }, data: LiteralChar(LiteralChar { value: '¡' }) }), BoxAstNode(AstNode { span: Span { start: 0, end: 0 }, data: LiteralChar(LiteralChar { value: 'ၑ' }) })] }) }) } }] }) }) } }] }) })
cc 61ec0946114d538b561988b6ba796d11f15780947b0d67028ded430db9d160e0 # shrinks to program = BoxAstNode(AstNode { span: Span { start: 0, end: 0 }, data: LiteralArray(LiteralArray { values: [BoxAstNode(AstNode { span: Span { start: 0, end: 0 }, data: LiteralArray(LiteralArray { values: [BoxAstNode(AstNode { span: Span { start: 0, end: 0 }, data: LiteralChar(LiteralChar { value: '%' }) }), BoxAstNode(AstNode { span: Span { start: 0, end: 0 }, data: LiteralChar(LiteralChar { value: '¥' }) })] }) })] }) })
